.. py:currentmodule:: java.lang

Runtime
=======

объект позволяет взаимодействовать с окружением, в котором запущена Java программа

Каждому приложению Java сопоставляется экземпляр класса Runtime.


.. py:class:: Runtime()

    .. py:method:: getRuntime()

        Возвращает соответсвующий приложению Runtime


    .. py:method:: exit(int status)

        `public void`

        Осуществляет завершение программы с кодом завершения status (при использовании этого метода особое внимание нужно уделить обработке исключений - выход будет осуществлен моментально, и в конструкциях try-catch-finally управление в finally передано не будет)


    .. py:method:: gc()

        `public native void`

        Сигнализирует сборщику мусора о необходимости запуска


    .. py:method:: freeMemory()

        `public native long`

        Возвращает количество свободной памяти. В некоторых случаях это количество может быть увеличено, если вызвать у объекта Runtime метод gc()


    .. py:method:: totalMemory()

        `public native long`

        Возвращает суммарное количество памяти, выделенное Java машине. Это количество может из изменяться даже в течении одного запуска, что зависит от реализации платформы на которой запущена Java машина. Так-же, не стоит закладываться на объем памяти, занимаемой одним определенным объектом - эта величина так же зависит от реализации Java машины.


    .. py:method:: loadLibrary(String libname)

        `public void`

        Загружает библиотеку с указанным именем. Обычно загрузка библиотек производится следующим образом: в классе, использующем native реализации методов, добавляется статический инициализатор, например:

            ::

                static { 
                    System.loadLibrary("LibFile"); 
                }

        Таким образом, когда класс будет загружен и инициализирован, необходимый код для реализации native методов так-же будет загружен. Если будет произведено несколько вызовов загрузки библиотеки с одним и тем-же именем - произведен будет только первый, а все остальные будут проигнорированы.

    .. py:method:: load(String filename)

        `public void`

        Подгружает файл с указанным названием в качестве библиотеки. В принципе, этот метод работает так-же как и метод load(), только принимает в качестве параметра именно название файла, а не библиотеки, тем самым позволяя загрузить любой файл с native кодом.


    .. py:method:: runFinalization()

        `public void`

        Производит запуск выполнения методов finalize() у всех объектов, этого ожидающих


    .. py:method:: exec(String command)

        `public Process`

        В отдельном процессе запускает команду, представленную переданной строкой. Возвращаемый объект :py:class::`java.lang.Process` может быть использован для управления выполнением этого процесса.