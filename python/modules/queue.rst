.. py:module:: queue

queue - очереди заданий
=======================

.. py:class:: Queue([maxsize=0])

    очередь (первым пришел, первым ушел)

    .. py:method:: empty()

        возвращает `True` если очередь пуста, иначе `False`

    .. py:method:: full()

        возвращает `True` если очередь не пуста, иначе `False`

    .. py:method:: get([block=True][, timeout=None])

        удаляет и возвращает элемент

        :param bool block: если `True`, то поток будет ожидать возможности получения элемента
        :param int timeout: максимальное время ожидания в секундах
        :raise queue.Full: если элемент получить не удалось

    .. py:method:: get_nowait()

        удаляет и возвращает элемент без ожидания

    .. py:method:: join()

        блокирует поток, пока не будут обработаны все элементы в очереди. Другие потоки после обработки текущего задания должны вызывать метод :py:meth:`task_done()`. Как только все задания будут выполнены, поток разюлокируется

    .. py:method:: put(<Элемент>[, block=True][, timeout=None])

        добавляет элемент в очередь 

        :param bool block: если `True`, то поток будет ожидать возможности добавления элемента
        :param int timeout: максимальное время ожидания в секундах
        :raise queue.Full: если элемент добавить не удалось

    .. py:method:: put_nowait(<Элемент>)

        добавляет элемент без ожидания

    .. py:method:: qsize()

        возвращает приблизительное количество элементов в очереди

    .. py:method:: task_done()

        помечает задание как выполенное



.. py:class:: LifoQueue([maxsize=0])

    стек, последним пришел, первым вышел. иметт аналогичные методы что и :py:class:`Queue`


.. py:class:: PriorityQueue([maxsize=0])

    очередь с приоритетами. Элементы очереди являются кортежами, первое элемент которого задает приоритет. иметт аналогичные методы что и :py:class:`Queue`