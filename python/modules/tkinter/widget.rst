Widget - базовый класс для всех виджетов
========================================

.. py:class:: Widget(**kwargs)

    Базовый виджет для всех виджетов.

    Наследник :py:class:`BaseWidget`

    Виджеты могут быть расположены на родительских виджетах с помощью менеджеров - pack, place, grid.

    .. note::

        Методы семейства \grab_ предназначены для управления потоком события.

        Виджет, захвативший поток, будет получать все события окна или приложения.

    .. note::

        Методы семейства \focus_ используются для управления фокусом ввода с клавиатуры.

        Виджет, имеющий фокус, получает все события с клавиатуры.


    .. py:method:: grid(**kwargs)
    .. py:method:: grid_configure(**kwargs)

        Один из менеджеров расположения, распологает виджеты в таблице

        * `row` - номер строки, в который помещаем виджет
        * `rowspan` - сколько строк занимает виджет
        * `column` - номер столбца, в который помещаем виджет.
        * `columnspan` - сколько столбцов занимает виджет.
        * `padx`, `pady` - размер внешней границы (бордюра) по горизонтали и вертикали.
        * `ipadx`, `ipady` - размер внутренней границы (бордюра) по горизонтали и вертикали.
        * `sticky` - константа :ref:`const_anchor_sticky`
        * `in_` - явное указание в какой родительский виджет должен быть помещён.

        .. code-block:: py

            btn.grid()


    .. py:method:: grid_bbox(column=None, row=None, col2=None, row2=None)

        Возвращает координаты в пикселях указанных столбцов и строк.


    .. py:method:: grid_forget()

        Удаляет виджет и всю информацию о его расположении из упаковщика.

        Позднее этот виджет может быть снова размещён


    .. py:method:: grid_info()

        Возвращает информацию о конфигурации упаковки


    .. py:method:: grid_remove()

        Удаляет виджет из под управления упаковщиком

        .. code-block:: py

            btn.grid_remove()


    .. py:method:: pack(**kwargs)
    .. py:method:: pack_configure(**kwargs)

        Один из менеджеров расположения, распологает виджеты один за другим.

        * `after` - :py:class:`Widget`, расположить виджет после указанного
        * `anchor` - константа :ref:`const_anchor_sticky`
        * `before` - :py:class:`Widget`, расположить виджет перед указанным
        * `cnf` - словарь
        * `expand` - константа :ref:`const_bool`, растягивать виджет при изменении окна
        * `fill` - константа :ref:`const_fill` родителя
        * `in` - :py:class:`Widget`
        * `in_` - :py:class:`Widget`
        * `ipadx` - отступ виджета по горизонтали
        * `ipady` - отступ виджета по вертикали
        * `padx` - внутренний отступ виджета по горизонтали
        * `pady` - внутренний отступ виджета по вертикали
        * `side` - константа :ref:`const_side` на родителе

        .. code-block:: py

            btn.pack()

        .. code-block:: py

            """
            например есть фрейм,
            и мы хотим расположить кнопки горизонтально один за другим
            """

            for button in frame_buttons:
                button.pack(side=LEFT)


    .. py:method:: pack_forget()

        Удаляет виджет и всю информацию о его расположении из упаковщика.

        Позднее этот виджет может быть снова размещён


    .. py:method:: pack_info()

        Возвращает информацию о конфигурации упаковки


    .. py:method:: place(**kwargs)

        Один из менеджеров расположения, распологает виджеты в фиксированном месте.

        * `anchor` - константа :ref:`const_anchor_sticky`
        * `bordermode` - определяет в какой степени будут учитываться границы при размещении виджета, ("inside", "outside", "ignore")
        * `in_` - явное указание в какой родительский виджет должен быть помещён.
        * `x`, `y` - абсолютные координаты (в пикселях) размещения виджета.
        * `width`, `height` - абсолютные ширина и высота виджета.
        * `relx`, `rely` - относительные координаты (от 0.0 до 1.0) размещения виджета.
        * `relwidth`, `relheight` - относительные ширина и высота виджета.


    .. py:method:: place_forget()

        Удаляет виджет и всю информацию о его расположении из упаковщика.

        Позднее этот виджет может быть снова размещён


    .. py:method:: place_info()

        Возвращает информацию о конфигурации упаковки

    .. py:method:: bell()

        Издает звук

    .. py:method:: bind(event, callback)

        Привязывает событие виджета к обработчику. Передает в обработчик в качестве аргумента. объект :py:class::`tkinter.Event`

        >>> widget.bind('<Button-1>', callback)
        
        * Button-1 - нажатие левой кнопки мыши
        * Button-2 - нажатие средней кнопки мыши
        * Button-3 - нажатие правой кнопки мыши
        * Double-Button-1 - двойное нажатие
        * ButtonRelease-1 - отпускание кнопки
        * B1-Motion - движение мыши с зажатой кнопкой
        * Enter - наведение курсора на тег
        * Leave - уход курсора от тега
        * r - кнопка на клавиатуре
        * Shift_L - левый шифт
        * Alt_L
        * Control_R
        * Return
        * Caps_Lock
        * Escape
        * Prior - PageUp
        * Next- PageDown.
        * Up
        * Down
        * Left 
        * Right

    .. py:method:: destroy()

        Уничтожает виджет

        >>> window.destroy()


    .. py:method:: focus()

        Устанавливает фокус на виджете

    .. py:method:: get()

        Возвращает значение виджета

    .. py:method:: protocol(event, func)

        Вещает обработчик события виджета

        :param event: ивент, ('WM_DELETE_WINDOW')
        :param func: обработчик

    .. py:method:: set()

        Устанавливает значение виджета

    .. py:method:: tag_bind(tag, event, callback)

        Привязывает обработчик тега с ивентом