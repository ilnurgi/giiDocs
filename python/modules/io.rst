.. py:module:: io

io
==

.. py:class:: StringIO([<начальное значение>][, newline=None])

	данный класс позволяет раьотать со строкой как с файловым объектом


	.. py:method:: close()

		закрыват файл


	.. py:method:: flush()

		cбрасывает данные из буфера в файл


	.. py:method:: getvalue()

		возвращает содержимое файла


	.. py:method:: read([<количесвто символов>])

		считывает данные из файла. Если nараметр не ука­зан, то возвращается содержимое "файла" от текущей nозиции указателя до конца "фай­ла". Если в качестве nараметра указать число, то за каждый вызов будет возвращаться указанное количество символов. Когда достигается конец "файла", метод возвращает nустую строку.


	.. py:method:: readline([<количесвто символов>])

		считывает из файла одну строку.


	.. py:method:: readlines([<количество символов>])

		 считывает содержимое файла в список


	.. py:method:: seek(<смещение>[, <позиция>=0])

		устанавливает указатель в позицию, имеющую указанное смещение отнотсительно указанной позиции.

		в параметре позиция могут быть следующие значения:

		* 0 - начало файла
		* 1 - ттекущая позиция указателя
		* 2 - конец файла


	.. py:method:: tell()

		возвращает позицию указателя относительно начала файла


	.. py:method:: truncate([<количесвто символов>])

		обрезает файл до указанного количесвта символов


	.. py:method:: write(<строка>)

		записывает указанную строку в файл


	.. py:method:: writelines(<последовательность>)

		записывате последовательность в файл


.. py:class:: BytesIO([<начальное значение>])

	данный класс позволяет работать с последовательностью байтов как с файловым объектом


	.. py:method:: getbuffer()

		возвращает ссылку на :py:class:`memoryview`, с помощью которого можно получать и изменять данные по индексу или срезу.

		>>> f = io.BytesiO(b"Python")
		>>> buf = f.getbuffer()
		>>> buf[O]
		Ь'Р'
		>>> buf[O] = b"J"
		»> f .getva1ue ()
		b'Jython'
		»> buf.to1ist()
		[74, 121, 116, 104, 111, 110]
		>>> buf.tobytes()
		b'Jython'
		>>> f.c1ose()


.. py:class:: memoryview
